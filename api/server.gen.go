// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コンテナイメージ一覧の取得
	// (GET /images/{service_name}/{repository_name})
	GetImages(c *gin.Context, serviceName ServiceName, repositoryName RepositoryName)
	// リポジトリ一覧の取得
	// (GET /repositories/{service_name})
	GetRepositories(c *gin.Context, serviceName ServiceName)
	// コンテナサービス一覧の取得
	// (GET /services)
	GetServices(c *gin.Context)
	// リリース設定の取得
	// (GET /setting/{service_name})
	GetSetting(c *gin.Context, serviceName ServiceName)
	// リリース設定の生成・更新
	// (POST /setting/{service_name})
	PostSetting(c *gin.Context, serviceName ServiceName)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	// ------------- Path parameter "repository_name" -------------
	var repositoryName RepositoryName

	err = runtime.BindStyledParameter("simple", false, "repository_name", c.Param("repository_name"), &repositoryName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter repository_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetImages(c, serviceName, repositoryName)
}

// GetRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRepositories(c, serviceName)
}

// GetServices operation middleware
func (siw *ServerInterfaceWrapper) GetServices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetServices(c)
}

// GetSetting operation middleware
func (siw *ServerInterfaceWrapper) GetSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetSetting(c, serviceName)
}

// PostSetting operation middleware
func (siw *ServerInterfaceWrapper) PostSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostSetting(c, serviceName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/images/:service_name/:repository_name", wrapper.GetImages)

	router.GET(options.BaseURL+"/repositories/:service_name", wrapper.GetRepositories)

	router.GET(options.BaseURL+"/services", wrapper.GetServices)

	router.GET(options.BaseURL+"/setting/:service_name", wrapper.GetSetting)

	router.POST(options.BaseURL+"/setting/:service_name", wrapper.PostSetting)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY3W7cRBR+FXTg0om3DVXTvQKqCCJRVCXchSia9c7a09oeMzNOskSWqC1BVQlRiapI",
	"QEH8CEKAglSQEhXxMiZpeQs0M/auvR5nd0MicbdrzznnO9/59eyBQ4OIhjgUHLp7ECGGAiwwU/8Yjign",
	"grLhVogCLB/1MXcYiQShIXQhzw7y7FGeHubZ3Tw7OL7/EVhA5JsICQ8s0GINRRYw/G5MGO5DV7AYW8Ad",
	"DwdIWhDDSIpwwUjoQpJYwDHbJg5uw5D+kWd/5tkneXrUCqCmYh7riT6MuXiN9glWtHAsBAndNf1cPnFo",
	"KHCofqIo8omDJDj7FpcI9yrqX2J4AF140R7Tbuu33F7XarVRA88H0s306Pn+L8ePP5N/01/zdD9PjxT5",
	"X+TZh3n6LWjEPKIh12gxY5StFU/ODeyK1GqEmu7n2Y8qIl/nWZanTxXswzz7WUF9lGdP1I8RYAtIgFzM",
	"z4SRCBzwaWBXpX5pqIguYgwNzeCfSHjZB3l2L0+/Uy5I8H8fvv/8+x9Oc2GU4eQiHVkb1dFM3tSrc7oT",
	"RZVcoAPr2sJssRjX9SzQi5qcinw38C+sJtvwJWWLUQTp2jE0srbK+UbqyX4CCyJGI8xE0YgCzLnMbGPX",
	"HPe4jdHBTQsEEb48qUGMwkB7t7AjwILdBS5o5BPXU8yRPnThWhz5y0s7nStXHQ8p5bqiDC6Y66fdhT5x",
	"ix464YEFUcw93N9C6u2AskD+gj4SeEEQ1cYbIoaB1TjDyXvVF2Ec9DBTCYlcXkvkhmg9ZS2IGZnOvTxU",
	"KC+MW4Z5WPBQ9boSLE23KVgkFJiFyIfuAPkcm+O33Akcz+VD91q4vKMAVhrJtKHeHrtWimfipXBcnq14",
	"WgF2ZnfRFS8IeldYn+70lpXdsu2cujzM7ajJoYorpdHZauz2Zby0u01uDy5fGrACtO495gBNdJ426Gq0",
	"bpkDYgHhWwz7GHHpweh9j1Ifo1AXlHo7RxFOkFK1UONG+2biBu+iIPIV/MQQc9WKSTigZY9HjgKHA0R8",
	"6IIXIMHjl6++4soHiw4NxmvgG4TRIeLxCzfkGY9wpDJQiQkR8a5tu0R4cU+K2aUmaPT+letrE1Xyz53D",
	"k3tfPnuw/+rNVbDAJw4uxlBh+sbq27PYsjn2sSMWxh1iAUWR3fNpzw4QF5jZb65eX3lrfUU1pILOhhBY",
	"sI0Z12gvLXbkYRrhEEUEurC02FnsyFRBwlNZYusNzN6r7smJvTfRpxJ51sVi9sZfDO47j48/fnj816eg",
	"UDA1iFdl1r+OheptHCa21sudTttsHp2zJ/ZGFaYBin0xXbS+FasBHQcBkv1wDmf0yNjQVQabcmhVPqA2",
	"zCDGR+zJOZBYU0VqXzKJNGlXd8+JELYHzLgbnhantYqVM0XLuCKfW8ym+VOGqlIj88fLQH65M89YGo2d",
	"toT4Tmgifb3UfhbCG+v8xRRIq0sV1gsosJlozlT3nytX6/PutEQdz5azUFb/jDjX9Gx1YcySRr5pGnv/",
	"MVctiCifldxnD746uXs/z56efP77ycPfGizfpLxGc3lBMmxnqXKHYk9coCT/+0g1+WiELClvqsrwjEd9",
	"17Z96iDfo1x0lzqdjgpHoWHWSTpeYkhxm3GqZL0dmm7ipmmo1HXjHs0k2+CtKlV8RW8m/wYAAP//XSCH",
	"GnEUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
