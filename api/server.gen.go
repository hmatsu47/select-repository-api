// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コンテナイメージ一覧の取得
	// (GET /images/{repository_name})
	GetImages(c *gin.Context, repositoryName RepositoryName)
	// リポジトリ一覧の取得
	// (GET /repositories)
	GetRepositories(c *gin.Context)
	// リリース設定の取得
	// (GET /setting)
	GetSetting(c *gin.Context)
	// リリース設定の生成・更新
	// (POST /setting)
	PostSetting(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(c *gin.Context) {

	var err error

	// ------------- Path parameter "repository_name" -------------
	var repositoryName RepositoryName

	err = runtime.BindStyledParameter("simple", false, "repository_name", c.Param("repository_name"), &repositoryName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter repository_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetImages(c, repositoryName)
}

// GetRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetRepositories(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRepositories(c)
}

// GetSetting operation middleware
func (siw *ServerInterfaceWrapper) GetSetting(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetSetting(c)
}

// PostSetting operation middleware
func (siw *ServerInterfaceWrapper) PostSetting(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostSetting(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/images/:repository_name", wrapper.GetImages)

	router.GET(options.BaseURL+"/repositories", wrapper.GetRepositories)

	router.GET(options.BaseURL+"/setting", wrapper.GetSetting)

	router.POST(options.BaseURL+"/setting", wrapper.PostSetting)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXXW/cRBT9K+jCoxMvhKipn4AqgkgUVSlv1Sqa9U7sqTyeYWbcZIks0bUEVSVEH6oi",
	"AQXxIQgBClJ5SFXEnxmSln+BZmyvvbvj7DbKA2+783HvOWfuPTM+gJBRzlKcKgnBAXAkEMUKC/tPYM4k",
	"UUyMdlJEsRkaYhkKwhVhKQSgiyNdPNTjY13c0cXRyb1PwQNiZjhSMXhQbpsL5IHAH2RE4CEESmTYAxnG",
	"mCKTQY242SKVIGkEeZ6Xi7FUb7EhwRaYxEqRNNoux81IyFKFU/sTcZ6QEBmI/j5N7PpJ9FcE3oUAXvYb",
	"3n45K/3rZVQwKWmWKMKRUP4uE3RliBSaDlTBZIObOFQlTIc2R7r4S4+fPD/87eTRF+bv+Hc9PtTjJ1aw",
	"r3TxiR5/DyVHyVkqS35YCCa2q5Ez6N2UJtWy/DZNVCfU8aEufjZQi291UejxUwv7WBe/WqgPdfHY/pgA",
	"9oBQFOELh7hlorohPjYgio91cVePf7BAF0Fsqu7CcW5PQncefdMWZ2GcVPJCgOcs5aXqsgtfXjemrcqy",
	"fuZNoLN6vjNxil/AAy4Yx0JV7UuxlOacHd3edoYbk4V9DxRRiVlZgvBm+s+D/RWpGE9IFFvlyBACuJzx",
	"ZGNtr7d+KYyRDV7Wl4NCV3V1URiSqHKeGQYe8EzGeLiD3LMOT51bI8mH7Yk0owMszIRCkc1OFKbSubUa",
	"QEKgkfmfCbJYZrOoCl4l9xyWXVFuE2ydS6ms61xIqrBIUQLBLkokdh/VRo+GcSRH0eV0Y88CbLXYonun",
	"+5g6JV5Kl4q4Wdti2gJ2brpoPaZ0sC6GbG+wYfPWHevmOtOvXXStKe+4uXlA5I7ACUbSsJvMDxhLMErL",
	"2rSz7tKd0aZJNbVvOktLtZqfSzK8jyhPLIXcIaE1MZLustodUWgBYopIAgHEFCmZvX7pjcgMrIaMNi+P",
	"d4hgIySzl66aNTGRyB6o3aYUl4HvR0TF2cBs8+tIMOeam1e2Z4ru39vHp3e/fnb/8M1rW+BBQkJcGXiV",
	"+urW+8vk8iVOcKhWmoZbQZz7g4QNfIqkwsJ/d+vK5nvXN21/V3LObQIPbmEhS7SvrvbMYsZxijiBANZW",
	"e6s9Uy5IxbZSfHt+0j+Y6fPcTEZYLe+R/xx/9PzHn/TtRyefPTj5+3OwaYW9s7ZMqb+NlfUGCTOPnNd6",
	"va5rbLLOn35m2GPZRVmiFu+cfkPZqyyjFBk7eQEupeNW5Q59Y++tJ/INN4hmiT9ro7kJ0YxWfesWfLre",
	"ltB5ux32PGo7XkwXJvkiNrXSrZLumxC+bJyxW6dpgzxLpMaIXlyf2dfahYrTSaFWphai7/JIDziTy6rz",
	"7P43p3fu6eLp6Zd/nj74Y06ma0xO6VR/fo26aba+0PyZz7P8fy/1vB5zmttLSGJxq278xtgD309YiJKY",
	"SRWs9Xo9yPuTCMvaaHNllVaTewv8wPV13bVrim+zsSaX9/P/AgAA//976ECiCRAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
