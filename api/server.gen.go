// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コンテナイメージ一覧の取得
	// (GET /images/{service_name}/{repository_name})
	GetImages(c *gin.Context, serviceName ServiceName, repositoryName RepositoryName)
	// リポジトリ一覧の取得
	// (GET /repositories/{service_name})
	GetRepositories(c *gin.Context, serviceName ServiceName)
	// コンテナサービス一覧の取得
	// (GET /services)
	GetServices(c *gin.Context)

	// (DELETE /setting/{service_name})
	DeleteSetting(c *gin.Context, serviceName ServiceName)
	// リリース設定の取得
	// (GET /setting/{service_name})
	GetSetting(c *gin.Context, serviceName ServiceName)
	// リリース設定の生成・更新
	// (POST /setting/{service_name})
	PostSetting(c *gin.Context, serviceName ServiceName)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	// ------------- Path parameter "repository_name" -------------
	var repositoryName RepositoryName

	err = runtime.BindStyledParameter("simple", false, "repository_name", c.Param("repository_name"), &repositoryName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter repository_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetImages(c, serviceName, repositoryName)
}

// GetRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRepositories(c, serviceName)
}

// GetServices operation middleware
func (siw *ServerInterfaceWrapper) GetServices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetServices(c)
}

// DeleteSetting operation middleware
func (siw *ServerInterfaceWrapper) DeleteSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteSetting(c, serviceName)
}

// GetSetting operation middleware
func (siw *ServerInterfaceWrapper) GetSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetSetting(c, serviceName)
}

// PostSetting operation middleware
func (siw *ServerInterfaceWrapper) PostSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostSetting(c, serviceName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/images/:service_name/:repository_name", wrapper.GetImages)

	router.GET(options.BaseURL+"/repositories/:service_name", wrapper.GetRepositories)

	router.GET(options.BaseURL+"/services", wrapper.GetServices)

	router.DELETE(options.BaseURL+"/setting/:service_name", wrapper.DeleteSetting)

	router.GET(options.BaseURL+"/setting/:service_name", wrapper.GetSetting)

	router.POST(options.BaseURL+"/setting/:service_name", wrapper.PostSetting)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY3W7cRBR+FTRw6cTbhqrpXgElgkgUVQl3IYpmvWfX09oeMzObZIksEVuCNBJqJapU",
	"/BQEVBACBKQCStSIlzGbtld9BTQz9q53Pc5uQiJxt2vPnPOd75vz49lADvVDGkAgOKpvoBAz7IMApv4x",
	"CCkngrLuSoB9kI+awB1GQkFogOooTfbS5GEaH6TJVprs9e59iixE5JsQCxdZSG8rGbIQgw86hEET1QXr",
	"gIW444KPpQfRDeUWLhgJ2iiKLMSBrRIHqjDEf6bJUZp8lsaHlQCGTJzGe6QXAxdv0CYBRQsHIUjQXtDP",
	"5ROHBgIC9ROHoUccLMHZt7hEuFEw/wqDFqqjl+0B7bZ+y+1FbVY7NfC8J8OMD5/t/trb/0L+jX9L4900",
	"PlTkf5Umn6Tx90gj5iENuEYLjFG2kD05N7Bz0qoRarybJj8pRb5NkySNnyjYB2nyi4L6ME0eqx99wBYi",
	"Pm4DPxNGIsDn48DOS/vSUaYuZgx3zeAfS3jJx2myncaPVAgS/D8HHz374ceTQuifcHKRgSz082iiaIaz",
	"c3wQWZZcYACL2sNkWgzyehLoWU6ORb7uexeWk1X4orzEKIJ07hgKWVXmfCftJD8jC4WMhsBEVoh84Fye",
	"bGPVHNS4pf7CZQsJIjy5UoPoy0Abt8ARyELrU1zQ0CNtVzFHmqiOrnVCb3ZmrXblquNiZVxnlCEEc/5U",
	"h9Ak7ayGjkRgobDDXWiuYPW2RZkvf6EmFjAliCrjpS2GhlVaw8mHxRdBx28AUwcSt/nQQS5tHT6yFuow",
	"Mp57uSgznjm3DP0w46EYdUEsTbdJLBIIYAH2UL2FPQ5m/WZrvuO2ebd9LZhdUwALhWRcU6/WrpLiiXjJ",
	"ApdrC5EWgJ05XHzF9f3GFdaka41Z5TcvOycOD6cO1BRQIZTc6WQ5dvsyzKyvktuty5daLAOta49ZoJHK",
	"UwVdtdYVsyAWInyFgQeYywj67xuUeoADnVDq7SmScISUoochbnRsJm5gHfuhp+BHBs1VKSZBi+Y1HjsK",
	"HPiYeKiOXB8L3nn16mtt+WDaof5gDHybMNrFvPPSDbnGJRyrE6i2CRHyum23iXA7DbnNzi2hUu2fu74w",
	"kiXPNw+Ot79+en/39ZvzyEIecSBrQ5nrG/PvTeLL5uCBI6YGFWIKh6Hd8GjD9jEXwOx35q/Pvbs4pwpS",
	"RmdpE7LQKjCu0V6arsnFNIQAhwTV0cx0bbomjwoWrjoltp7A7I3inBzZGyN1KpJr2yAmL/xZ497c793d",
	"6f39ACkUTDXieXnq3wKhahtHI1Pr5Vqtqjf319kjc6OSqYU7nhi/dXgqVg264/tY1sNTBKNbxpLOMrQs",
	"m1bhA2rJDGKwxB7tA5E1dsvQl0wkXdrF2XNEwmrBjLPhSTotFLycSS3jiHxumo2LJ5eqkCOn18tAfj4z",
	"T5gapZk2h/h+YCJ9Mbd+FsJL4/zFJEhlSAXWMyhoOdKcqepvOKtN8EDARC1vc793Z/v5549eHG0V3/bu",
	"7qTx9vFfW+nmgxdHd0qkvqk8DPrPWWgd/tRQDak6yUqoKzPsXEGdZ15VhjCQVyNfNvXr/5hkFgopn5Tc",
	"p/e/Od66lyZPjr/843jn9xLLNykfojm/2elWs1S4/LFHbn6i/71SZT5KkkX5FVsuz2BGqdu2Rx3suZSL",
	"+kytVlNyZBYmHQEG0xfJrmFO3Dlcx01XiOMsFApS6QLQtLfEW3FX9vm/HP0bAAD//zHsi40qFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
