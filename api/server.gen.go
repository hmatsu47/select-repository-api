// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コンテナイメージ一覧の取得
	// (GET /images/{repository_name})
	GetImages(c *gin.Context, repositoryName RepositoryName)
	// リポジトリ一覧の取得
	// (GET /repositories/{service_name})
	GetRepositories(c *gin.Context, serviceName ServiceName)
	// コンテナサービス一覧の取得
	// (GET /services)
	GetServices(c *gin.Context)
	// リリース設定の取得
	// (GET /setting)
	GetSetting(c *gin.Context)
	// リリース設定の生成・更新
	// (POST /setting)
	PostSetting(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(c *gin.Context) {

	var err error

	// ------------- Path parameter "repository_name" -------------
	var repositoryName RepositoryName

	err = runtime.BindStyledParameter("simple", false, "repository_name", c.Param("repository_name"), &repositoryName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter repository_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetImages(c, repositoryName)
}

// GetRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service_name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRepositories(c, serviceName)
}

// GetServices operation middleware
func (siw *ServerInterfaceWrapper) GetServices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetServices(c)
}

// GetSetting operation middleware
func (siw *ServerInterfaceWrapper) GetSetting(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetSetting(c)
}

// PostSetting operation middleware
func (siw *ServerInterfaceWrapper) PostSetting(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostSetting(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/images/:repository_name", wrapper.GetImages)

	router.GET(options.BaseURL+"/repositories/:service_name", wrapper.GetRepositories)

	router.GET(options.BaseURL+"/services", wrapper.GetServices)

	router.GET(options.BaseURL+"/setting", wrapper.GetSetting)

	router.POST(options.BaseURL+"/setting", wrapper.PostSetting)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYb2/cNBz+KsjwMm1uLdW6ewVMFVRiaGp5N06VL+e7eEtiYzttjyoSSySYJiEmMQ0J",
	"GIg/glJgIA2kVkN8mdBufAtkO7kkF+cuPa3S3t0l9s/P8/z+xgfAIT4lAQoEB90DQCGDPhKIqX8MUcKx",
	"IGy8E0AfyUcDxB2GqcAkAF2QJkdp8jCNj9PkTpocnd77BFgAyzcUChdYQG+rGbIAQ++HmKEB6AoWIgtw",
	"x0U+lCeIMZVbuGA4GIEosgBHbBc7qAlD/Fea/J0mn6XxSSOAionznB7pxYiLN8gAIyULR0LgYLSln8sn",
	"DgkECtRPSKmHHSjB2fu+p9ZPrL/C0BB0wct2obqt33J7W1tVjP3QE5hCJuwhYf7SAApYNZTBJP2byBEa",
	"psEzR1KY+OTZ4W+nj76Qf+Pf0/gwjU+Uu75Kk4/T+HugOXJKAq75IcYI28qezKB3k8uj2vLbkFaNUOPD",
	"NPlZ+fDbNEnS+ImCfZwmvyqoD9PksfoxAWwB7MMR4gthxAL5fB7YTWlfHpQJDRmDYzP4xxJe8lGa3E3j",
	"HxQFCf7f4w+f/fjTLAqTnMAXSWRrknmt2FTzeT6JLK8ukMC2PqGdL4pK0AZ6lsVzkS+Yxq1ysglflBcl",
	"JZDOHUPpa8qc76Sd5BdgAcoIRUxkpctHnMvINtbZoiremCzsWUBg4cmVGoQ1VXsssL/EBaEeHrlKOTwA",
	"XXAlpN766l5n7bLjQmVcZ5SBgjl/mikM8CirulMMLEBD7qLBDjS/NXSz2hqOPyi/CEK/j5iKPTjilZit",
	"ba1GpwVChufLLBdlxrPDLUOzzCiXCZb8opU1+QUHArEAeqA7hB5HZletd3zHHfHx6EqwvqcAlmrGvI7f",
	"7KZGiVvpkhGXa0tMS8AWpgvXXN/vr7EB2euvq3PzCjNzsjg3UROhEpX80HbpdGsFre7v4lvDlUtDloHW",
	"ZcbsoKki0wRdddEds0MsgPkOQx6CXDKYvO8T4iEY6IRSb835NsW/OKqyr3pKRR/Nz6QP2oc+9RSFyOB3",
	"VXlxMCR5SYeOAoh8iD3QBa4PBQ9fvfzaSD5YdohfzIlvYUbGkIcvXZNrXMyhikK1TQjKu7Y9wsIN+3Kb",
	"nVsCtVK/cXVrKlP+u318dvfrp/cPX7++CSzgYQdlXSc7+trmu23OsjnykCOWiiqxBCm1+x7p2z7kAjH7",
	"7c2rG+9sb6iilMlZ2wQssIsY12gvLXfkYkJRACkGXbC63FnuyHCBwlWRYuuByz6YKk6RfDlCon1hzxrz",
	"7Uennz44/edzoI5lqtFuylB/EwlV0DiYmkpXOp2m3jtZZ0/NhcovQxh6Yv7W6tSrGnDo+1AWwXOQ0X0i",
	"i3fQk02p9El1wwyiWGJPF/9ImrDLs6J9UP6YmeEA4yw3S/et0ikLqW8caZ+bD+bxyaUvBfn59a98KGrx",
	"8xm3ZajXZtAc4nuBSfTt3PoigtfG74sJ+EZKJdUzKKAXac0m7ak5OKtdalZkFt1gEY2qc/5zjcdGCoUs",
	"GnnP1KgsQAlvq87T+9+c3bmXJk/Ovvzz7MEfNZmuE17RKb+0GDfTLN1r2FOXGtELL3Vdj5rmUX57lCd/",
	"0V27tu0RB3ou4aK72ul0QNSbWGjby4q5AWf3BTN3VguY6XZsnoVSJtbutkx7a7qVd2Xfqb3o/wAAAP//",
	"FwALHQUUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
