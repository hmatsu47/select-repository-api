// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// コンテナイメージ一覧の取得
	// (GET /images/{service_name}/{repository_name})
	GetImages(c *gin.Context, serviceName ServiceName, repositoryName RepositoryName)
	// リポジトリ一覧の取得
	// (GET /repositories/{service_name})
	GetRepositories(c *gin.Context, serviceName ServiceName)
	// コンテナサービス一覧の取得
	// (GET /services)
	GetServices(c *gin.Context)
	// リリース設定の削除
	// (DELETE /setting/{service_name})
	DeleteSetting(c *gin.Context, serviceName ServiceName)
	// リリース設定の取得
	// (GET /setting/{service_name})
	GetSetting(c *gin.Context, serviceName ServiceName)
	// リリース設定の生成・更新
	// (POST /setting/{service_name})
	PostSetting(c *gin.Context, serviceName ServiceName)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetImages operation middleware
func (siw *ServerInterfaceWrapper) GetImages(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_name" -------------
	var repositoryName RepositoryName

	err = runtime.BindStyledParameter("simple", false, "repository_name", c.Param("repository_name"), &repositoryName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetImages(c, serviceName, repositoryName)
}

// GetRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRepositories(c, serviceName)
}

// GetServices operation middleware
func (siw *ServerInterfaceWrapper) GetServices(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetServices(c)
}

// DeleteSetting operation middleware
func (siw *ServerInterfaceWrapper) DeleteSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteSetting(c, serviceName)
}

// GetSetting operation middleware
func (siw *ServerInterfaceWrapper) GetSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetSetting(c, serviceName)
}

// PostSetting operation middleware
func (siw *ServerInterfaceWrapper) PostSetting(c *gin.Context) {

	var err error

	// ------------- Path parameter "service_name" -------------
	var serviceName ServiceName

	err = runtime.BindStyledParameter("simple", false, "service_name", c.Param("service_name"), &serviceName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_name: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostSetting(c, serviceName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/images/:service_name/:repository_name", wrapper.GetImages)

	router.GET(options.BaseURL+"/repositories/:service_name", wrapper.GetRepositories)

	router.GET(options.BaseURL+"/services", wrapper.GetServices)

	router.DELETE(options.BaseURL+"/setting/:service_name", wrapper.DeleteSetting)

	router.GET(options.BaseURL+"/setting/:service_name", wrapper.GetSetting)

	router.POST(options.BaseURL+"/setting/:service_name", wrapper.PostSetting)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xY3W7cRBR+FTRw6cTbhqrpXgElgkgUVQl3IYpmvWfX09oeMzObZIksEVuCNBJqJapU",
	"/BQEVBACBKQCStSIlzGbtld9BTQz9q53Pc5uQiJxt2vPOec73/n1bCCH+iENIBAc1TdQiBn2QQBT/xiE",
	"lBNBWXclwD7IR03gDiOhIDRAdZQme2nyMI0P0mQrTfZ69z5FFiLyTYiFiyykxUqKLMTggw5h0ER1wTpg",
	"Ie644GNpQXRDKcIFI0EbRZGFOLBV4kAVhvjPNDlKk8/S+LASwJCK01iP9GHg4g3aJKBo4SAECdoL+rl8",
	"4tBAQKB+4jD0iIMlOPsWlwg3CupfYdBCdfSyPaDd1m+5vajVaqMGnvekm/Hhs91fe/tfyL/xb2m8m8aH",
	"ivyv0uSTNP4eacQ8pAHXaIExyhayJ+cGdk5qNUKNd9PkJxWRb9MkSeMnCvZBmvyioD5Mk8fqRx+whYiP",
	"28DPhJEI8Pk4sPNSvzSURRczhrtm8I8lvOTjNNlO40fKBQn+n4OPnv3w40ku9DOcXKQjC/06msib4eoc",
	"70RWJRfowKK2MFksBnU9CfSsJsciX/e9C6vJKnxR3mIUQbp2DI2sqnK+k3qSn5GFQkZDYCJrRD5wLjPb",
	"2DUHPW6pf3DZQoIIT57UIPphoI1b4AhkofUpLmjokbarmCNNVEfXOqE3O7NWu3LVcbFSrivK4IK5fqpd",
	"aJJ21kNHPLBQ2OEuNFewetuizJe/UBMLmBJEtfGSiGFglc5w8mHxRdDxG8BUQuI2H0rkkuhwylqow8h4",
	"7uWhTHlm3DLMw4yHoteFYGm6TcEigQAWYA/VW9jjYI7fbM133Dbvtq8Fs2sKYKGRjBvq1bGrpHgiXjLH",
	"5dmCpwVgZ3YXX3F9v3GFNelaY1bZzdvOicvDqR01OVRwJTc6WY3dvgwz66vkduvypRbLQOveYw7QSOep",
	"gq5G64o5IBYifIWBB5hLD/rvG5R6gANdUOrtKYpwhJSihSFutG8mbmAd+6Gn4EeGmKtWTIIWzXs8dhQ4",
	"8DHxUB25Pha88+rV19rywbRD/cEa+DZhtIt556Ub8oxLOFYZqMSECHndtttEuJ2GFLNzTajU++euL4xU",
	"yfPNg+Ptr5/e33395jyykEccyMZQZvrG/HuT2LI5eOCIqUGHmMJhaDc82rB9zAUw+53563PvLs6phpTR",
	"WRJCFloFxjXaS9M1eZiGEOCQoDqama5N12SqYOGqLLH1BmZvFPfkyN4Y6VORPNsGMXnjzwb35n7v7k7v",
	"7wdIoWBqEM/LrH8LhOptHI1srZdrtarZ3D9nj+yNKkwt3PHEeNHhrVgN6I7vY9kPT+GMHhlLusrQshxa",
	"hQ+oJTOIwRF7dA5E1liRoS+ZSJq0i7vnSAirA2bcDU+K00LBypmiZVyRzy1m4/zJQ1WokdPHy0B+vjNP",
	"WBqlnTaH+H5gIn0x134Wwkvr/MUUSKVLBdYzKGg50pyp7m/I1SZ4IGCikbe537uz/fzzRy+Otopve3d3",
	"0nj7+K+tdPPBi6M7JVLfVBYG8+cstA5/ahgS0Yx0iA9tX6ZQdX2W1FQW57n6c54lWelCiQnTqP+P9Wmh",
	"kPJJyX16/5vjrXtp8uT4yz+Od34vsXyT8iGa80uhbjVLhXsje+TSKPrfR6rMRzl589u5PDyD9aZu2x51",
	"sOdSLuoztVpNhSPTMOn2MFjcSHaDc6Lk8Agw3T6O01DoZaW7Q5NsibeiVHZzsBz9GwAA//8vf2PdZRUA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
